{
  "ver": "0.1",
  "info": {
    "id": "M3VBWt",
    "date": "1738883384",
    "viewed": 82,
    "name": "orthographic heightmap (WIP)",
    "username": "jakel101",
    "description": "goal is to display some texture as a 3D heighmap. like an array of columns maybe?",
    "likes": 2,
    "published": 3,
    "flags": 0,
    "usePreview": 0,
    "tags": [
      "25d",
      "heightmap",
      "orthographic"
    ],
    "hasliked": 0,
    "retrieved": "2025-03-16T00:53:22.599091+00:00"
  },
  "renderpass": [
    {
      "inputs": [
        {
          "id": 14854,
          "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png",
          "ctype": "texture",
          "channel": 0,
          "sampler": {
            "filter": "mipmap",
            "wrap": "repeat",
            "vflip": "true",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        }
      ],
      "outputs": [
        {
          "id": 37,
          "channel": 0
        }
      ],
      "code": "// APache 2.0 no patents \\_%_/\n# define PI 3.141592653\n\nvec4 RayPlaneIntersection(vec3 ro, vec3 rd, vec3 norm, float b){\n    // rayOrigin, rayDirection, normal of the plane and bias distance along that normal.\n    // t < 0 means a miss? (kinda impossible in the orthographic setup)\n    // t returns the total distance to that plane\n    // can hit from either side!!!\n    rd = normalize(rd); //redundant!\n    float t = -1.0;\n    t = dot((norm*b)-ro,norm)/dot(rd,norm);\n    vec3 p = ro+rd*t;\n    return vec4(p,t);\n}\n\nvec2 cubeHit(vec3 ro, vec3 rd, float width, float height){\n    //TODO: return side (1=top, 2=left, 3=right) and distance to a cuube\n    // side=0 means miss?\n    \n    // idea: 3 planes and they intersect at the top near corner.\n    //we take the furtherst distance as our\n    // normals for these\n    vec3 top = vec3(0,0,1);\n    vec3 sx = vec3(1,0,0);\n    vec3 sy = vec3(0,1,0);    \n    //force rd+ro to be the nearest? (maybe using sign(rd))\n    vec4 top_h = RayPlaneIntersection(ro, rd, top, height);\n    vec4 sx_h = RayPlaneIntersection(ro, rd, sx, width);\n    vec4 sy_h = RayPlaneIntersection(ro, rd, sy, width);\n    // we shouldn't get any misses... maybe edge on or something?\n    \n    \n    // actually we need to test all 6 planes (or use abs?)\n    // and by the order of intersections we know which face hit or if it's a miss...\n    // will build a paper model to write down the matrix.\n    \n    float t = -1.0;\n    vec4 hit;\n    int side = 0;\n    //shitty argmax\n    if (top_h.w > t) {hit = top_h; side=1;} //redundant?\n    else if (sx_h.w > hit.w) {hit = sx_h; side=2;}\n    else if (sy_h.w > hit.w) {hit = sy_h; side=3;}\n    // now t is the furthest hit distance\n    t = hit.w;\n    // but it still could be a miss...?\n    if (hit.z == 1.0 || abs(hit.x-0.001) > width || abs(hit.y) > width) {side=0; t= -1.0;};    \n    \n    return vec2(side, t);\n}\n\n\nvec4 sampleTexture(vec3 p, ivec3 cells) {\n    // transforms the world space 3D to a texture location 2D and runs a texel fetch for that voxel\n    // maps this into the cube of -1..1, -1..1, 0..1?\n    //returns 0 otherwise\n    \n    // move p back into 0..1\n    p += 1.0;\n    p *= 0.5;\n    \n    // sampling coordinates by element multiplication. BE CAREFUL WIHT float() constructors -.-\n    ivec2 st = ivec2(floor(p.xy*vec2(cells.xy)));\n    // exit ouside the area\n    if (st.x < 0 || st.y < 0 || st.x >= cells.x || st.y >= cells.y) return vec4(0);\n    vec4 res = texelFetch(iChannel0, st, 0);\n    //return vec4(st, 0.0,0.0);\n    \n    return res;\n}\n\nivec2 worldToCell(vec3 p, ivec2 cells) {\n    // from the sampleTexture function above\n    \n    p += 1.0;\n    p *= 0.5;    \n    ivec2 st = ivec2(floor(p.xy*vec2(cells.xy)));\n    return st;\n}\n\nvec3 march (vec3 ro, vec3 rd, ivec2 cells){\n    // the idea is to march the ray to the next cell boundry.\n    // sample the texture and check height\n    // if the intersection ray is above the height, we missed this block\n    // if the intersection is below 0, we are outside the texture (return black)\n    // if the intersection is below the height, we hit the side (return some color?)\n    // issues: which side are we facing? (get this from rd?)    \n    \n    vec3 entry_point;\n    float t; //distance of current ray\n    // essentially which of the direcitons we are looking along x and y axis\n    vec2 dirs = sign(rd.xy) * -1.0;\n    vec3 d = ((1.0 * vec3(dirs, 1.0)) - ro) /rd; // distance to top, and near planes x/y\n    // if the distance to top is longest, we hit the other two front planes above the upper edge\n    if (d.z > d.x && d.z > d.y) {\n        t = d.z;\n        entry_point = ro + d.z*rd;        \n        // far miss? (we already know it's not hitting the front\n        if (abs(entry_point.x) > 1.0 || abs(entry_point.y) > 1.0) return vec3(0.1);        \n        //return vec3(0.2, 0.2, 1.0); // DEBUG: we enter the top\n    }\n    // if we hit the x plane before the y plane - we entry at the y plane\n    else if (d.x < d.y) {\n        t = d.y;\n        entry_point = ro + d.y*rd;\n        if (abs(entry_point.x) > 1.0) return vec3(0.2, 0.1, 0.1); // far miss on the side\n        //return vec3(0.2, 1.0, 0.2); // DEBUG: we enter the Y side\n    }\n    else {// we hit the y plane first and are entrying through the x plane\n        t = d.x;\n        entry_point = ro + d.x*rd;\n        if (abs(entry_point.y) > 1.0) return vec3(0.1, 0.2, 0.1); // far miss on the side\n        //return vec3(1.0, 0.2, 0.2); //DEBUG we enter the X side\n    }    \n    // TODO: the above is like a AABB, it can easily be simplified I suspect.\n    \n    \n    // near ground hit\n    //return entry_point;\n    if (entry_point.z < 0.0) return vec3(0.5);\n        \n    vec3 front_hit = entry_point; // initialize as 1 to not hit the top on the first plane\n    \n    float cell_size = 2.0/(float(cells.x)); // kinda constant?\n    \n    ivec2 current_cell = worldToCell(front_hit, cells.xy);\n    vec4 tex = texelFetch(iChannel0, current_cell, 0);\n    // return tex.rgb; // debug\n    // hit top, hit right, hit left, miss?\n    // distances to the rear planes .z can be ignored ?=?\n    vec3 rear_wall = vec3(front_hit.xy + cell_size*dirs, tex.z);\n    vec3 rear_d = (rear_wall - ro) /rd;\n    if (rear_d.x < rear_d.y) {// rear on the x plane got hit first\n        return vec3(tex);\n    }\n    return (rear_d);\n    \n    int x_plane; // we will for loop here\n    float plane_depth = 2.0/(float(cells.x)); // cells is the number of points in the -1 .. 1 domain?\n    for (x_plane = 0; x_plane <= cells.x; x_plane ++){\n        float plane_x = float(x_plane)*cell_size -1.0 ;\n        // test1: intersection with the x=1 plane\n        // ro + t*rd = h | - ro\n        // t*rd = h - ro | /rd\n        // t = (h - ro)/rd (all in vec3!)\n        float t = (plane_x - ro.x)/rd.x; // distance where the ray intersects plane\n        if (t < -1.0) return vec3(0); // hit is behind the camera -> black\n\n        // essentially the rear hit now.\n        vec3 h = ro + t * rd; // world space position of the hit/intersection\n        if (h.z < -0.0) return vec3(cos(h.z*10.0)*0.3); // below the plane -> near black\n        //if ((abs(h.x) > 1.1)) return vec3(0.3); // ouside the area\n\n        // sample height at current position\n        vec4 tex = sampleTexture(h, ivec3(cells, 0));\n        \n        if (front_hit.z < tex.z) return vec3(tex.r, 0.0, 0.0); // we have hit the side      \n        // the ray is \"above\" the front hit        \n        if (tex.z > h.z) return vec3(0.0, 0.0, tex.b); // we have hit the top        \n        // the ray is above this column\n        \n        // TODO: hit the other side?\n\n        // keep track of this hit as the front for the next iteration\n        front_hit = h;\n    }\n    \n    // todo: y plane?\n    // it could be a while loop where we check which planes we intersect\n    // and then decide where to go next based on the rear hit?\n    // (top down view)\n    // I guess there only ever are two intersections: front and rear\n    //  ---\n    // |   /\n    // |  /|   ->   x_plane +1 (or -1) because we hit the side\n    // | / |\n    //  /--\n    \n    \n    \n    return vec3(0.8);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv normalized to [-1..1] for height with more width\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 mo = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    // orbiting camera setup\n    float azimuth = PI*mo.x;\n    float altitude = 0.5*PI*clamp(mo.y, -0.01, 1.0); // maybe just positive?\n    vec3 camera_pos = vec3(\n        cos(azimuth)*cos(altitude),\n        sin(azimuth)*cos(altitude),\n        sin(altitude));    \n    // the camera is always looking \"at\" the origin\n    vec3 look_dir = vec3(0.0, 0.0, -0.0) - camera_pos;\n    //camera_pos += look_dir * -1.0; // moving the camera \"back\" to avoid occlusions?\n    // two vectors orthogonal to this camera direction (tagents?)\n    vec3 look_u = camera_pos + vec3(-sin(azimuth), cos(azimuth), 0.0);\n    vec3 look_v = normalize(cross(camera_pos, look_u)); // is this faster?\n    //vec3 look_v = camera_pos + vec3(sin(altitude)*-cos(azimuth), sin(altitude)*-sin(azimuth), cos(altitude));    \n    // camera plane(origin of each pixel) -> barycentric?\n    vec3 camera_plane = camera_pos + (look_u*uv.x)*1.0 + (look_v*uv.y)*1.5; // wider fov = larger \"sensor\"\n\n    vec4 ground_plane = RayPlaneIntersection(camera_plane, look_dir, vec3(0,0,1),0.0);    \n    \n    vec3 col = vec3(step(0.0,uv),0.01);\n        \n    vec2 bbox = cubeHit(camera_plane, look_dir, 0.4, 0.1);        \n    col = sampleTexture(ground_plane.rgb, ivec3(64,32,0)).rgb;    \n    \n    //col.r = (bbox.x/4.0);\n    //col.b = (bbox.y);\n    \n    \n    col = march(camera_plane, look_dir, ivec2(8,8)); // use iChannelResolution[0]?\n    \n    fragColor = vec4(vec3(col),1.0);\n}",
      "name": "Image",
      "description": "",
      "type": "image"
    }
  ]
}