{
  "ver": "0.1",
  "info": {
    "id": "M3VBWt",
    "date": "1738883384",
    "viewed": 97,
    "name": "orthographic heightmap (WIP)",
    "username": "jakel101",
    "description": "goal is to display some texture as a 3D heighmap. like an array of columns maybe?",
    "likes": 2,
    "published": 3,
    "flags": 0,
    "usePreview": 0,
    "tags": [
      "25d",
      "heightmap",
      "orthographic"
    ],
    "hasliked": 0,
    "retrieved": "2025-03-29T23:01:09.777249+00:00"
  },
  "renderpass": [
    {
      "inputs": [
        {
          "id": 48,
          "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg",
          "ctype": "texture",
          "channel": 0,
          "sampler": {
            "filter": "mipmap",
            "wrap": "repeat",
            "vflip": "true",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        }
      ],
      "outputs": [
        {
          "id": 37,
          "channel": 0
        }
      ],
      "code": "// APache 2.0 no patents \\_%_/\n# define PI 3.141592653\n# define HEIGHT_SCALE 0.4\n\nivec2 worldToCell(vec3 p, ivec2 cells) {\n    // from the sampleTexture function above\n    \n    p += 1.0;\n    p *= 0.5;\n    ivec2 st = ivec2(floor(p.xy*vec2(cells.xy)));\n    // TODO: find an actual solution to the edge cases!\n    st = min(st, cells-1);\n    return st;\n}\n\nvec2 cellToWorld(ivec2 current_cell, ivec2 cells, vec2 dirs){\n    // gives the rear plane of a cell, based on dirs?\n    // TODO: can we avoid this magic epsilon number?\n    vec2 p = (vec2(current_cell)-min(vec2(0.0001),dirs)) / vec2(cells);\n    p *= 2.0;\n    p -= 1.0;\n    //p = min(p, vec2(1.0));\n    return p;\n    \n}\n\nvec4 sampleHeight(ivec2 cell){\n    // to allow for more complex math to determine height\n    // .rgb should just return the texture color or some modification of it\n    \n    vec4 tex = texelFetch(iChannel0, cell, 0);\n    vec4 res;\n    res.a = (tex.a + tex.r + tex.g)/3.0;\n    res.rgb = tex.rgb; // * res.a // to make it more of a \"height\" map?\n    res.a *= HEIGHT_SCALE; //TODO: global height scale?\n    return res;\n}\n\nvec3 sampleGround(vec3 ro, vec3 rd){\n    // for any ray that misses the heightmap\n    float ground_height = 0.0;\n    float ground_dist = (ground_height-ro.z)/rd.z;\n    vec3 ground_hit = ro + rd * ground_dist;\n    \n    vec3 col = vec3(fract(ground_hit.xy), ground_dist);\n    \n    col.rgb *= 0.2;\n    return col;\n}\n\nvec3 march (vec3 ro, vec3 rd, ivec2 cells){\n    // the idea is to march the ray to the next cell boundry.\n    // sample the texture and check height\n    // if the intersection ray is above the height, we missed this block\n    // if the intersection is below 0, we are outside the texture (return black)\n    // if the intersection is below the height, we hit the side (return some color?)\n    // issues: which side are we facing? (get this from rd?)    \n    \n    vec3 entry_point;\n    float t; //distance of current ray\n    // essentially which of the direcitons we are looking along x and y axis\n    vec2 dirs = sign(rd.xy) * -1.0;\n    if (dirs.x == 0.0 || dirs.y == 0.0) (dirs = vec2(1)); // avoid 0.0\n    vec3 d = ((1.0 * vec3(dirs, 1.0)) - ro) /rd; // distance to top, and near planes x/y\n    // if the distance to top is longest, we hit the other two front planes above the upper edge\n    if (d.z > d.x && d.z > d.y) {\n        t = d.z;\n        entry_point = ro + d.z*rd;        \n        // make sure this is grid alinged! (stair step function?\n        //entry_point.xy = floor(vec2(0.5) + entry_point.xy*vec2(cells.xy)*0.5)/(vec2(cells.xy)*0.5);\n        \n        // far miss? (we already know it's not hitting the front\n        if (abs(entry_point.x) > 1.0 || abs(entry_point.y) > 1.0) return sampleGround(ro, rd); vec3(0.1);\n        //return vec3(0.2, 0.2, 1.0); // DEBUG: we enter the top   \n        //return (entry_point);        \n    }\n    // if we hit the x plane before the y plane - we entry at the y plane\n    else if (d.x < d.y) {\n        t = d.y;\n        entry_point = ro + d.y*rd;\n        if (abs(entry_point.x) > 1.0) return sampleGround(ro, rd); //vec3(0.2, 0.1, 0.1); // far miss on the side\n        //return vec3(0.2, 1.0, 0.2); // DEBUG: we enter the Y side\n    }\n    else {// we hit the y plane first and are entrying through the x plane\n        t = d.x;\n        entry_point = ro + d.x*rd;\n        if (abs(entry_point.y) > 1.0) return sampleGround(ro, rd); //vec3(0.1, 0.2, 0.1); // far miss on the side\n        //return vec3(1.0, 0.2, 0.2); //DEBUG we enter the X side\n    }    \n    // TODO: the above is like a AABB, it can easily be simplified I suspect.\n    \n    \n    // near ground hit\n    //return entry_point;\n    if (entry_point.z < 0.0) return sampleGround(ro, rd); //vec3(0.5);\n    \n    //return entry_point;\n    vec3 front_hit = entry_point; // initialize as 1 to not hit the top on the first plane\n    \n    float l = 0.15; // light for the side angle\n    // new loop develops here  - what is the reasonable max?\n    for (int i = 0; i<max(cells.x, cells.y)*2; i++){\n        ivec2 current_cell = worldToCell(front_hit, cells.xy);\n        \n        // rear miss -> end reached?\n        if (min(front_hit.x, front_hit.y) < -1.0) return sampleGround(ro, rd); //vec3(0.05*float(i)); // miss neg\n        if (max(front_hit.x, front_hit.y) > 1.0) return sampleGround(ro, rd); //vec3(0.1*float(i));// miss pos\n        \n        vec4 tex = sampleHeight(current_cell);\n        // return tex.rgb; // debug\n        \n        // hit top, hit right, hit left, miss?\n        // distances to the rear planes .z can be ignored ?=?        \n        // where we actually march to the \"next\" far - wall.\n        \n        vec2 far_walls = cellToWorld(current_cell, cells, dirs);\n        // exit if we are the far wall, likely means we hit the end!\n        if (far_walls.x == front_hit.x || far_walls.y == front_hit.y) return sampleGround(ro, rd);\n        \n        \n        // distance to next far walls\n        vec3 rear_d = (vec3(far_walls.xy, tex.a) - ro)/rd;\n        //return abs(vec3((rear_d.xyz))*0.5);\n        \n        // the min distance is the nearest wall, we step until there!\n        vec3 rear_hit = ro + rd*min(rear_d.x, rear_d.y); //t;        \n        // return rear_hit;\n        // hit side?\n        if (front_hit.z < tex.a) return (tex.rgb - l * tex.a);\n        // hit top?\n        if (tex.a > rear_hit.z) return vec3(tex.rgb);\n        \n        if (front_hit == rear_hit) {\n        // if we didn't actually advance, we should nudge here and hope for the best!\n            rear_hit += rd*0.0001;\n        }\n        front_hit = rear_hit; // keep track for the next iteration\n        //return vec3(0.01);\n    }\n    //return sampleGround(ro, rd); // but we shouldn't get here!\n    return vec3(0.8); // percision issues where we ended the loop -.-\n    \n    \n}\n\n//TODO: sun angle and showdow casting (from the hit towards the sun...)?\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv normalized to [-1..1] for height with more width\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 mo = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    \n    // for when it's just idling...   \n    float azimuth = iTime*0.15 + mo.x;\n    float altitude = 0.7+cos(iTime*0.4)*0.15;      \n    if (sign(iMouse.z) > 0.0){\n        // orbiting camera setup\n        azimuth = PI*mo.x;\n        altitude = 0.5*PI*clamp(mo.y+1.0, -0.01, 0.99); // maybe just positive?\n    }\n    \n    // make sure you don't look \"below\"\n    altitude = clamp(altitude, HEIGHT_SCALE, PI);\n    \n    vec3 camera_pos = vec3(\n        cos(azimuth)*cos(altitude),\n        sin(azimuth)*cos(altitude),\n        sin(altitude));    \n    // the camera is always looking \"at\" the origin\n    vec3 look_dir = vec3(0.0, 0.0, HEIGHT_SCALE*0.5) - camera_pos;\n    \n    //camera_pos += look_dir * -5.0; // moving the camera \"back\" to avoid occlusions?\n    // two vectors orthogonal to this camera direction (tagents?)    \n    //vec3 look_u = camera_pos + vec3(-sin(azimuth), cos(azimuth), 0.0);\n    //vec3 look_v = camera_pos + vec3(sin(altitude)*-cos(azimuth), sin(altitude)*-sin(azimuth), cos(altitude));    \n    \n    // turns out analytically these aren't correct. so using cross instead -.-\n    vec3 look_u = normalize(cross(vec3(0.0, 0.0, -1.0), look_dir));\n    vec3 look_v = normalize(cross(camera_pos, look_u)); // is this faster?\n    // camera plane(origin of each pixel) -> barycentric?\n    \n    // orthographic zoom just makes the sensor smaller\n    float zoom = clamp(1.0 + cos(iTime*0.3), 0.05, 1.5);\n    vec3 camera_plane = camera_pos + (look_u*uv.x)*zoom + (look_v*uv.y)*zoom; // wider fov = larger \"sensor\"    \n        \n    vec3 col = march(camera_plane, look_dir, ivec2(1024, 1024)); // use iChannelResolution[0]?\n    \n    fragColor = vec4(vec3(col),1.0);\n}",
      "name": "Image",
      "description": "",
      "type": "image"
    }
  ]
}