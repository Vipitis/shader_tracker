{
  "ver": "0.1",
  "info": {
    "id": "M3VBWt",
    "date": "1738883384",
    "viewed": 242,
    "name": "pathtraced heightmap (WIP)",
    "username": "jakel101",
    "description": "goal is to display some texture as a 3D heighmap. like an array of columns maybe? for development progress see: [url=https://github.com/Vipitis/shader_tracker/blob/main/jakel101/M3VBWt_pathtraced_heightmap__WIP_/Image.frag]GitHub[/url]\n",
    "likes": 5,
    "published": 3,
    "flags": 0,
    "usePreview": 0,
    "tags": [
      "25d",
      "heightmap",
      "pathracing"
    ],
    "hasliked": 0,
    "retrieved": "2025-08-29T00:01:01.158682+00:00"
  },
  "renderpass": [
    {
      "inputs": [
        {
          "id": 16,
          "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png",
          "ctype": "texture",
          "channel": 0,
          "sampler": {
            "filter": "mipmap",
            "wrap": "repeat",
            "vflip": "true",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        }
      ],
      "outputs": [
        {
          "id": 37,
          "channel": 0
        }
      ],
      "code": "// Apache 2.0 no patents \\_%_/\n\n/* Image pass shader to draw a texture/buffer/input as a heightmap\n* with some pathtracing as pillars of pixels.\n* Meant to be used in multiple projects and therefore\n* easily configurable at the top with a few macros\n*\n* selflink: https://www.shadertoy.com/view/M3VBWt\n* other projects using this shader/framework: https://www.shadertoy.com/playlist/mX2cD3\n* \n* work in progress:\n* todo(ideas):\n* - monte carlo light simulation\n* - pysics simulation\n* - ball/area lights\n* - infinite/LOD tiles?\n* - DDA like traversal\n* - cleanup as usual\n* feedback/improvements welcome here.\n*/\n\n\n# define PI 3.141592653\n# define HEIGHT_SCALE 0.5\n\n# define CELLS ivec2(iChannelResolution[0].x, iChannelResolution[0].y)\n//# define CELLS ivec2(3)\n\n// unsure yet where to bring this!\n# define SUN normalize(vec3(sin(iDate.w*0.5), cos(iTime), HEIGHT_SCALE*1.5))\n// normalize(vec3(3.0, -5.0, 2.0))\n\n// horizontal FOV, if you use negative values the camera will be orthographic!\n// examples:\n// FOV -1.0 for orthographic (sensor size)\n// FOV 90.0 for perspective wide\n// FOV 45.0 for perspective narower\n# define FOV 90.0\n\n// how far \"behind\" the camera is behind the arcball\n# define CAMERA_DIST -0.65\n\n// TODO one variable to change between sampled and direct light\n// 0 -> directional light\n// 1 -> point light\n// 2 -> MIS? (one light, one sampled?)\n// 3+ -> bounces//samples?\n# define BOUNCES 4\n# define SAMPLES 8\n\nstruct Material{\n    vec3 col; // ground color (or texture?)\n    float emissivity; //emitted light in some unit?\n    float roughness; // invers reflectivity, sorta\n    float translucency; // something like 1.0 for glass and 0.0 for solids? -> rays split/sample/refract??\n    float IOR; // index of refraction\n};\n\n// edit these here to change the look and feel!\nMaterial chalk = Material(vec3(1.0),           0.0,  0.65,  0.0, 1.3);\nMaterial ground = Material(vec3(0.5),          0.0,  0.25,  0.0, 0.0);\nMaterial sky = Material(vec3(0.02, 0.3, 0.85), 1.0,  0.90,  0.0, 0.0);\nMaterial glass = Material(vec3(1.0),           0.0,  0.02,  0.9, 1.5);\n\n\nivec2 worldToCell(vec3 p) {\n    // move world space again\n    p += 1.0;\n    p *= 0.5;\n    ivec2 st = ivec2((p.xy*vec2(CELLS.xy)));\n    // TODO: find an actual solution to the edge cases!\n    st = min(st, CELLS -1);\n    return st;\n}\n\nstruct Ray{\n    vec3 origin;\n    vec3 dir;\n    vec3 inv_dir; // for speedup?\n};\n\n// helper constructor\nRay newRay(vec3 ro, vec3 rd){\n    return Ray(ro, rd, 1.0/rd);\n}\n\n\nstruct IntersectionInfo{\n    bool hit;\n    // rest illdefined for a miss\n    bool inside;\n    vec3 entry;\n    vec3 exit;\n    vec3 entry_norm;\n    vec3 exit_norm;\n    float entry_dist;\n    float exit_dist;\n};\n\n// sorta reference: https://tavianator.com/2022/ray_box_boundary.html\nIntersectionInfo AABB(vec3 center, vec3 size, Ray ray){\n    IntersectionInfo res;\n\n    vec3 pos = center + size;\n    vec3 neg = center - size;\n\n    vec3 pos_dist = (pos-ray.origin) * ray.inv_dir;\n    vec3 neg_dist = (neg-ray.origin) * ray.inv_dir;\n\n    vec3 min_dist = min(pos_dist, neg_dist);\n    vec3 max_dist = max(pos_dist, neg_dist);\n\n    res.entry_dist = max(max(min_dist.x, min_dist.y), min_dist.z);\n    res.exit_dist = min(min(max_dist.x, max_dist.y), max_dist.z);\n\n    // normals point away from the center\n    res.entry_norm = -sign(ray.dir) * vec3(greaterThanEqual(min_dist, vec3(res.entry_dist)));\n    res.exit_norm = sign(ray.dir) * vec3(lessThanEqual(max_dist, vec3(res.exit_dist)));\n\n    // essentially methods?\n    res.entry = ray.origin + ray.dir*res.entry_dist;\n    res.exit = ray.origin + ray.dir*res.exit_dist;\n\n    res.hit = res.entry_dist < res.exit_dist && res.exit_dist > 0.0;\n    res.inside = res.entry_dist < 0.0; // entry behind us\n\n    return res;\n}\n\n// with help from: https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection.html\nIntersectionInfo Sphere(vec3 center, float radius, Ray ray){\n    IntersectionInfo res;\n    vec3 local = ray.origin - center;\n        \n    float a = dot(ray.dir, ray.dir);\n    float b = 2.0* dot(ray.dir, local);\n    float c = dot(local, local) - pow(radius,2.0);\n        \n    float discriminant = pow(b,2.0) - 4.0*a*c;\n    \n    res.hit = discriminant >= 0.0;\n    \n    float t0 = (-b + sqrt(discriminant))/ (2.0*a);\n    float t1 = (-b - sqrt(discriminant))/ (2.0*a);\n\n    res.entry_dist = min(t0, t1);\n    res.exit_dist = max(t0, t1);\n    \n    if (res.entry_dist < 0.0 && res.exit_dist < 0.0){\n        res.hit = false;\n    }\n\n    res.entry = ray.origin + ray.dir * res.entry_dist;\n    res.exit = ray.origin + ray.dir * res.exit_dist;\n\n    res.entry_norm = normalize(res.entry - center);\n    res.exit_norm = normalize(res.exit - center);\n    \n    res.inside = res.entry_dist < 0.0 && res.exit_dist > 0.0; // entry behind us\n\n    return res;\n}\n\n\nIntersectionInfo pillar_hits(ivec2 cell, float height, Ray ray){\n    // let's move the pillar into world space by having it's center + extends\n\n    vec3 extend = vec3(1.0/vec2(CELLS), abs(height)*0.5);\n    vec3 p = vec3(cell.xy, abs(height)*0.5);\n    p.xy *= extend.xy;\n    p.xy *= 2.0;\n    p.xy -= 1.0 - extend.xy; // not quite the offset?\n    //extend.z = extend.y; // make them cubes?\n\n    // for the case of clouds the box is at the top?\n    if (height < 0.0){\n        p.z = HEIGHT_SCALE*(1.0-abs(height*0.5));\n    }\n\n    // TODO: redo this math when less asleep...\n    IntersectionInfo res = AABB(p, extend, ray);\n    return res;\n}\n\n\nvec4 sampleHeight(ivec2 cell){\n    // to allow for more complex math to determine height\n    // .rgb should just return the texture color or some modification of it\n    //cell.x = (cell.x + iFrame) % int(iChannelResolution[0].x); // fun texture scroll\n    vec4 tex = texelFetch(iChannel0, cell, 0);\n    vec4 res;\n    res.a = tex.r + tex.g + tex.b; // we do height by a sum of the color for now\n    res.a *= 0.33;\n    res.rgb = tex.rgb; // simply copy the color as the \"texture\" for now\n    \n    // res.a = tex.a; // debug/use existing height data.\n    res.a *= HEIGHT_SCALE;\n    return res;\n}\n\n// from: https://www.shadertoy.com/view/7l3yRn\nvec2 get_random_numbers(inout uvec2 seed) {\n    // This is PCG2D: https://jcgt.org/published/0009/03/02/\n    seed = 1664525u * seed + 1013904223u;\n    seed.x += 1664525u * seed.y;\n    seed.y += 1664525u * seed.x;\n    seed ^= (seed >> 16u);\n    seed.x += 1664525u * seed.y;\n    seed.y += 1664525u * seed.x;\n    seed ^= (seed >> 16u);\n    // Convert to float. The constant here is 2^-32.\n    return vec2(seed) * 2.32830643654e-10;\n}\n\n// also from above\n// TODO collaplse into one function!\n// Given uniform random numbers u_0, u_1 in [0,1)^2, this function returns a\n// uniformly distributed point on the unit sphere (i.e. a random direction)\n// (omega)\nvec3 sample_sphere(vec2 random_numbers) {\n    float z = 2.0 * random_numbers[1] - 1.0;\n    float phi = 2.0 * PI * random_numbers[0];\n    float x = cos(phi) * sqrt(1.0 - z * z);\n    float y = sin(phi) * sqrt(1.0 - z * z);\n    return vec3(x, y, z);\n}\n\n\n// Like sample_sphere() but only samples the hemisphere where the dot product\n// with the given normal (n) is >= 0\nvec3 sample_hemisphere(vec2 random_numbers, vec3 normal) {\n    vec3 direction = sample_sphere(random_numbers);\n    if (dot(normal, direction) < 0.0)\n        direction -= 2.0 * dot(normal, direction) * normal;\n    return direction;\n}\n\n\nstruct RaycastInfo{\n    bool hit; // if negative, the rest is undefined.\n    float dist; // hit_info.entry_dist redundant?\n    //ivec2 cell; //current_cell?\n    IntersectionInfo hit_info; //has the entry norm etc.\n    vec3 col; // TODO: replace with material\n    //Ray ray; //just as a reference?\n};\n\n\nRaycastInfo raycast(Ray ray){\n    // cast the ray untill there is a hit or we exit the box\n    // \"any hit\" shader?\n    RaycastInfo result;\n    \n    IntersectionInfo box = AABB(vec3(0.0, 0.0, HEIGHT_SCALE*0.5), vec3(1.0, 1.0, HEIGHT_SCALE*0.5), ray);\n\n    vec3 entry = box.entry;\n\n    if (!box.hit){\n        // if we \"MISS\" the whole box (not inside?).\n        result.hit = false;\n        return result;\n        \n    }\n    // everything below here is inside the box\n    if (box.inside){\n        // if we are \"inside\" the entry should just be ro!\n        entry = ray.origin; // maybe problems with distance caluclations at the end?\n    }\n    \n    ivec2 current_cell = worldToCell(entry); // TODO: this one is problematic!\n    int i;\n    ivec2 max_cells = CELLS - min(current_cell, CELLS-current_cell);\n    int max_depth = (max_cells.x + max_cells.y)+2; // could also be min!\n    for (i = 0; i < max_depth; i++){\n        if (current_cell.x < 0 || current_cell.x >= CELLS.x ||\n            current_cell.y < 0 || current_cell.y >= CELLS.y){\n            // we marched far enough are are \"outside the box\" now!\n            result.hit = false;            \n            return result;\n        }\n\n        vec4 tex = sampleHeight(current_cell);\n        IntersectionInfo pillar = pillar_hits(current_cell, tex.a, ray);\n\n        if (pillar.hit) {\n            // \"any hit\" (side/top/bot) -> loop ends here\n            // do a little bit of light sim by doing diffuse \"block of chalk\"\n            vec3 col = tex.rgb;\n            // TODO materail decision here?\n            result.hit = true;\n            result.hit_info = pillar;\n            result.dist = pillar.entry_dist;\n            result.col = col;\n            return result;            \n        }\n\n        // check if our exit distance larger than the box, means we should be at the final pillar...\n        if (pillar.exit_dist >= box.exit_dist){\n            result.hit = false;\n            return result; // do we ever get here?\n        }\n\n        // the step\n        // TODO: DDA style decision\n        ivec2 next_cell = current_cell + ivec2(pillar.exit_norm.xy);\n        if (next_cell == current_cell){\n            // in this case we do another raycast - but without any Z component\n            // so the vector is sideways and points to a new cell!\n            vec3 flat_rd = vec3(ray.dir.xy, 0.0);\n            Ray flat_ray = Ray(ray.origin, flat_rd, 1.0/flat_rd);\n\n            IntersectionInfo grid = pillar_hits(current_cell, 1.0, flat_ray);\n            next_cell += ivec2(grid.exit_norm.xy); // TODO check if this norm is correct!\n        }\n        // for next iteration\n        current_cell = next_cell;\n    }\n    \n    result.hit = false;\n    return result;\n}\n\n// more like a bad shadowmap\n// idea for the future: precompute the horizon per pixel: https://youtu.be/LluCbGdi-RM\nfloat directional_light(Ray sun_ray, vec3 normal){\n    // return the amount of shadowed?\n    // we are now marching upwards from some hit\n    // ro is essentially the point we started from\n    // rd is the sun angle\n    RaycastInfo res = raycast(sun_ray);\n    //return res.a;\n    \n    //TODO: intensity/color?\n    \n    float amt = 1.0;\n    \n    \n    if (!res.hit){// || (ro + rd*res.a).z >= HEIGHT_SCALE){\n        // miss means full sunlight!\n        amt = max(0.0, dot(sun_ray.dir, normal));\n    }\n    else {\n        // TODO: use distance?\n        amt = 0.1; // additional ambient light from here?\n    }\n    return amt;\n}\n\n// struct for lights? colored light?\nfloat point_light(vec3 start, vec3 light_pos, float light_intensity, vec3 normal){\n    float amount;\n    \n    vec3 light_dir = normalize(light_pos - start);\n    float light_dist = distance(start, light_pos);\n    // Ray(hit+0.001*SUN, SUN, 1.0/SUN);\n    Ray light_cast = Ray(start + 0.001*light_dir, light_dir, 1.0/light_dir);\n    RaycastInfo res = raycast(light_cast);\n    \n    if (!res.hit || res.dist > light_dist) {\n        // either we miss geometry or we hit gometry behind the light\n        amount = inversesqrt(light_dist)* light_intensity;\n        amount *= max(0.0, dot(normal, light_dir));\n    }\n    else {\n        // hit an intersection before the light, so don't see the light!\n        amount = 0.0;        \n    }\n    \n    // TODO still needs dot normal!\n    return amount;\n}\n\n\n\n// copied from https://www.shadertoy.com/view/M3jGzh\nfloat checkerboard(vec2 check_uv, float cells){\n    check_uv *= cells/2.0;\n    float rows = float(mod(check_uv.y, 1.0) <= 0.5);\n    float cols = float(mod(check_uv.x, 1.0) <= 0.5);\n    return float(rows == cols);\n}\n\nstruct HitInfo{\n    Material mat;\n    float dist;\n    vec3 norm;\n    vec3 pos;\n    bool inside; // for doing glass rays!\n};\n\n\nHitInfo sampleGround(vec3 ro, vec3 rd){\n    HitInfo res;\n    // TODO: rename to sample skybox maybe? as the ground is sorta part of that...\n    float ground_height = 0.0;\n    float ground_dist = (ground_height-ro.z)/rd.z;\n    // TODO: use the actual sphere for the \"skybox\"\n    if (ground_dist < 0.0 ||ground_dist > 10.0) {\n        // essentially sky hit instead?\n        // just some random skybox right now... could be improved of course!\n        vec3 col = vec3(0.23, 0.59, 0.92)*exp(dot(SUN, rd)-0.8);\n        col = clamp(col, vec3(0.0), vec3(1.0));\n        \n        res.mat = sky;\n        \n        res.mat.col = col; // no longer matches with \"sky\" - so gotta change the above maybe?\n        \n        res.dist = 10.0;\n        res.pos = ro + rd*res.dist;\n        res.mat.emissivity *= clamp(smoothstep(res.dist - 8.1, res.dist- 3.0, res.pos.z), 0.0, 1.0);\n        res.norm = -rd;\n        return res; // some random distance that is positive!\n    }\n\n    vec3 ground_hit = ro + (rd * ground_dist);\n\n    float val = checkerboard(ground_hit.xy, 8.0)* 0.25;\n    val += 0.45;\n    //val *= 2.0 - length(abs(ground_hit));\n\n    // fake sun angle spotlight... TODO actual angle and normal calculation!\n    //val *= 2.5 - min(2.3, length((-SUN-ground_hit)));//,vec3(0.0,0.0,1.0));\n\n    vec3 col = vec3(val);\n    res.mat = ground;\n    res.mat.col = col;\n    res.dist = ground_dist;\n    res.pos = ground_hit;\n    res.norm = vec3(0.0, 0.0, 1.0);\n    return res;\n}\n\n// TODO for montecarlo we need an external loop around this!\nHitInfo scene(Ray camera){\n    HitInfo res;\n    \n    // terrain\n    RaycastInfo terrain = raycast(camera);\n\n    // ball\n    IntersectionInfo ball = Sphere(SUN, 0.15, camera);\n\n    // five cases: just terrain hit, ball hit, both miss, both hit terrain closer, both hit ball closer\n    // idea: get all hits, then calculate closest (sorted?) and then return that. if none return background\n    // TODO: redo logic (dynamic arrays?)\n\n    if (terrain.hit && (!ball.hit || terrain.dist < ball.entry_dist)) {\n        // terrain infront of the ball\n        res.mat = chalk;\n        res.mat.col = terrain.col; // TODO: material construction\n        res.norm = terrain.hit_info.entry_norm;\n        res.pos = terrain.hit_info.entry;\n        res.inside = terrain.hit_info.inside;\n        if (res.inside) {\n            res.norm = terrain.hit_info.exit_norm;\n            res.pos = terrain.hit_info.exit;\n        }\n        \n    } else if (ball.hit) {\n        // ball infront of the terrain\n        res.mat = glass; // TODO: glass material?\n        res.norm = ball.entry_norm;\n        res.pos = ball.entry;        \n        res.inside = ball.inside;\n        if (res.inside) {\n            res.norm = ball.exit_norm;\n            res.pos = ball.exit;\n        }\n        \n    } else {\n        res = sampleGround(camera.origin, camera.dir);\n    }\n    \n\n    return res;\n}\n\n// follow ? https://www.shadertoy.com/view/7l3yRn\nstruct RayRadiance{\n    vec3 radiance;\n    vec3 throughput_weight;\n};\n\n// reading: https://www.pbr-book.org/4ed/Radiometry,_Spectra,_and_Color/Surface_Reflection\n// further: https://www.pbr-book.org/4ed/Reflection_Models\n// watching maybe: https://youtu.be/wA1KVZ1eOuA\nvec3 brsf(in vec3 rd, in HitInfo hit, inout vec3 next_dir, inout uvec2 seed){\n    // returns the outgoing radiance?\n    // as well as the next ray direction. (inout)\n    \n    Material mat = hit.mat;\n    vec3 norm = hit.norm;\n    // naive reflection model\n    vec3 perfect_reflection = reflect(rd, norm);\n    next_dir = mix(perfect_reflection, next_dir, mat.roughness);\n    \n    //native transmission model\n\n    vec2 randoms = get_random_numbers(seed);\n    if (randoms.x < mat.translucency) {\n        float IOR = hit.inside ? mat.IOR : 1.0/mat.IOR;\n        vec3 reflect_norm = hit.inside ? norm : -norm;\n        vec3 perfect_refraction = refract(rd, -reflect_norm, IOR);\n        next_dir = mix(perfect_refraction, -next_dir, mat.roughness);\n        //next_dir = perfect_refraction;\n        norm = reflect_norm;\n    }\n\n    vec3 outgoing = mat.col * 2.0 * max(0.0, dot(norm, next_dir));\n    return outgoing;\n}\n\n\n\n// factored out to function so the seed changes correctly due to inout -.-\nvec3 get_ray_radiance(Ray camera, inout uvec2 seed){\n    //after get_ray_radiance in https://www.shadertoy.com/view/7l3yRn\n\n    vec3 radiance = vec3(0.0);\n    vec3 throughput_weight = vec3(1.0);\n\n    int i;\n    for(i=0; i<=BOUNCES; i++){\n        HitInfo first_hit = scene(camera);\n        radiance += throughput_weight * first_hit.mat.emissivity;\n        \n        // initialize with random here??\n        vec3 next_dir = sample_hemisphere(get_random_numbers(seed), first_hit.norm);        \n        vec3 outgoing_radiance = brsf(camera.dir, first_hit, next_dir, seed);\n        \n        throughput_weight *= outgoing_radiance;\n        camera = newRay(first_hit.pos+0.0001*next_dir, next_dir);\n    }\n\n    return radiance;\n}\n\n\n\n// TODO: sample hemisphere function\n// TODO: brdf kinda function where it gives you a new direction based on material.\n// TODO: calucalte the light from that brdf too? HitInfo2 -> RayRadiance, next_dir\n// multiple importance sampling? following: https://lisyarus.github.io/blog/posts/multiple-importance-sampling.html\n// idea being we sample the direct light or direction light once, and then do one random sample. weight them 50/50?\n// TODO: call scene below and loop it?\n// 1. cast scene, 2. accumulate light, 3. get next dir, LOOP\n// add a MAX_bounces or SPP var at the top.\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv normalized to [-1..1] for height with more width\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 mo = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    \n    \n    uvec2 seed = uvec2(fragCoord) ^ uvec2(iFrame << 16);\n\n    //fragColor = texture(iChannel0, uv);\n    //return;\n\n    // for when it's just idling...\n    float azimuth = -1.9+iTime*0.1 + mo.x; // keeps a bit of residue of the mouse!\n    float altitude = 0.7+cos(1.5+iTime*0.25)*0.35;\n    if (sign(iMouse.z) > 0.0){\n        // orbiting camera setup\n        azimuth = PI*mo.x;\n        altitude = 0.5*PI*clamp(mo.y+1.0, -0.01, 0.99); // maybe just positive?\n    }\n\n    // make sure you don't look \"below\"\n    altitude = clamp(altitude, HEIGHT_SCALE*0.2, PI);\n\n    // a unit length orbit!\n    vec3 camera_pos = vec3(\n        cos(azimuth)*cos(altitude),\n        sin(azimuth)*cos(altitude),\n        sin(altitude));\n    // the camera is always looking \"at\" the origin or half way above it\n    vec3 look_dir = normalize(vec3(0.0, 0.0, HEIGHT_SCALE*0.5) - camera_pos);\n\n\n    // TODO moving the camera in and out over time??\n    camera_pos += look_dir * CAMERA_DIST; // moving the camera \"back\" to avoid occlusions?\n    // two vectors orthogonal to this camera direction (tagents?)\n    //vec3 look_u = camera_pos + vec3(-sin(azimuth), cos(azimuth), 0.0);\n    //vec3 look_v = camera_pos + vec3(sin(altitude)*-cos(azimuth), sin(altitude)*-sin(azimuth), cos(altitude));\n\n\n    // turns out analytically these aren't correct. so using cross instead -.-\n    vec3 look_u = normalize(cross(vec3(0.0, 0.0, -1.0), look_dir));\n    vec3 look_v = normalize(cross(camera_pos, look_u)); // is this faster?\n    // camera plane(origin of each pixel) -> barycentric?\n\n    vec3 camera_plane;\n    vec3 ray_dir;\n    vec3 ray_origin;\n\n    if (FOV > 0.0){\n        // assume a pinhole camera.\n        // FOV is the horizontal fov, the given focal length becomes:\n        // the 1.0 is the sensor height.\n        float focal_length = 1.0/tan(radians(FOV*0.5));\n\n        // the ro\n        camera_plane = camera_pos - (look_dir*focal_length) + ((look_u*uv.x) + (look_v*uv.y))*-1.0; // inverted here to see upright\n        ray_origin = camera_pos;\n\n        // the rd\n        ray_dir = camera_pos-camera_plane;\n        ray_dir = normalize(ray_dir);\n    }\n\n    else {\n        // negative FOV values are interpreted as a sensor size for a orthographic camera!\n        // horizontal sensor size, -1 would be something sensible... everything else is far away\n        float sensor_size = FOV*0.5*-1.0;\n        camera_plane = camera_pos + ((look_u*uv.x)+(look_v*uv.y))*sensor_size; // wider fov = larger \"sensor\"\n        ray_dir = look_dir;\n        ray_origin = camera_plane;\n    }\n\n    // todo extract to a function\n    // Ray in -> material/normal out?\n    // caluclate and aggregate light throughput?\n    // new ray direction based on sampled material/refraction?\n\n    Ray camera = newRay(ray_origin, ray_dir);\n    vec3 out_col = vec3(0.0);\n            \n    int j;\n    for(j=0; j<SAMPLES; ++j){\n        vec3 rad = get_ray_radiance(camera, seed);\n        out_col += rad;\n    }\n    // average color over all samples\n    out_col /= float(SAMPLES);\n    \n    // TODO gamma correction?\n    fragColor = vec4(out_col, 1.0);\n}",
      "name": "Image",
      "description": "",
      "type": "image"
    }
  ]
}