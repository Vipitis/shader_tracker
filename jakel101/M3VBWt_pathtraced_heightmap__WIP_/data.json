{
  "ver": "0.1",
  "info": {
    "id": "M3VBWt",
    "date": "1738883384",
    "viewed": 213,
    "name": "pathtraced heightmap (WIP)",
    "username": "jakel101",
    "description": "goal is to display some texture as a 3D heighmap. like an array of columns maybe?",
    "likes": 5,
    "published": 3,
    "flags": 0,
    "usePreview": 0,
    "tags": [
      "25d",
      "heightmap",
      "pathracing"
    ],
    "hasliked": 0,
    "retrieved": "2025-07-27T23:40:44.865504+00:00"
  },
  "renderpass": [
    {
      "inputs": [
        {
          "id": 16,
          "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png",
          "ctype": "texture",
          "channel": 0,
          "sampler": {
            "filter": "mipmap",
            "wrap": "repeat",
            "vflip": "true",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        }
      ],
      "outputs": [
        {
          "id": 37,
          "channel": 0
        }
      ],
      "code": "// Apache 2.0 no patents \\_%_/\n\n/* Image pass shader to draw a texture/buffer/input as a heightmap\n* with some pathtracing as pillars of pixels.\n* Meant to be used in multiple projects and therefore\n* easily configurable at the top with a few macros\n* \n* selflink: https://www.shadertoy.com/view/M3VBWt\n* \n* work in progress:\n* todo(ideas):\n* - monte carlo light simulation\n* - refactor with structs\n* - pysics simulation\n* - point/ball/area lights\n* - infinite/LOD tiles?\n* - DDA like traversal\n* - fix artefacts\n* - cleanup as usual\n* feedback/improvements welcome here or on the original.\n*/\n\n\n# define PI 3.141592653\n# define HEIGHT_SCALE 0.4\n\n# define CELLS ivec2(iChannelResolution[0].x, iChannelResolution[0].y)\n\n// unsure yet where to bring this!\n# define SUN normalize(vec3(sin(iDate.w*0.5), cos(iTime), HEIGHT_SCALE*1.5))\n// normalize(vec3(3.0, -5.0, 2.0))\n\n// horizontal FOV, if you use negative values the camera will be orthographic!\n// examples:\n// FOV -1.0 for orthographic (sensor size)\n// FOV 90.0 for perspective wide\n// FOV 45.0 for perspective narower\n# define FOV 90.0\n\n\n// next project: actual structs for easier pathracing:\nstruct Material{\n    vec3 col; // ground color (or texture?)\n    float emissivity; //emitted light in some unit?\n    float roughness; // or just fresnel? what kinda model are we doing?\n    float translucency; // something like 1.0 for glass and 0.0 for solids? -> rays split/sample/refract??\n};\n\nstruct Hit{\n    vec3 normal;\n    vec3 pos;\n    Material mat;\n    // no object ID or something I think...\n};\n\nstruct Ray{\n    vec3 origin;\n    vec3 direction;\n    float dist;\n};\n\n\n// exaples?\nMaterial white_chalk = Material(vec3(1.0), 0.0, 0.99, 0.0);\nMaterial ground = Material(vec3(0.5), 0.0, 0.85, 0.0);\nMaterial sky = Material(vec3(0.02, 0.03, 0.95), 0.5, 0.5, 0.5);\nMaterial glass = Material(vec3(0.95), 0.0, 0.05, 0.95);\n\n\nivec2 worldToCell(vec3 p) {\n    \n    // move world space again\n    p += 1.0;\n    p *= 0.5;\n    ivec2 st = ivec2((p.xy*vec2(CELLS.xy)));\n    // TODO: find an actual solution to the edge cases!\n    st = min(st, CELLS -1);\n    return st;\n}\n\nvec4 AABB(vec3 center, vec3 extend, vec3 ro, vec3 rd){        \n    // miss is found by checking rear_hit > front_hit\n    // .zw contains information about the entry/exit 1: +x, -1: -x, 2: +y, -2: -y, 3: +z, -3: -z??\n    // you can do norm[abs(int(box_hit.z))-1] = sign(box_hit.z);\n    \n    // extend goes both ways! (size)\n    vec3 front = center + sign(-rd)*extend; \n    vec3 rear = center + sign(rd)*extend; \n    \n    //now distance those 6 planes:\n    vec3 front_dist = (front-ro)/rd;\n    vec3 rear_dist = (rear-ro)/rd;\n    \n    // TODO: turn into massive if/else if/else blocks for the direction info? (is there argmax?)\n    float front_hit;//= max(max(front_dist.x, front_dist.y), front_dist.z); // front\n    float front_dir;\n    if (front_dist.x > front_dist.y && front_dist.x > front_dist.z){\n        front_hit = front_dist.x;\n        front_dir = 1.0 * sign(rd.x);\n    }\n    else if (front_dist.y > front_dist.x && front_dist.y > front_dist.z) {\n        front_hit = front_dist.y;\n        front_dir = 2.0 * sign(rd.y);\n    }\n    else {\n        front_hit = front_dist.z;\n        front_dir = 3.0 * sign(rd.z);\n    }\n    // in case of ro being inside the box, the front_dir normal still needs to point away from center.\n    front_dir *= sign(front_hit); \n    \n    float rear_hit;// = min(min(rear_dist.x, rear_dist.y), rear_dist.z);\n    float rear_dir;\n    if (rear_dist.x < rear_dist.y && rear_dist.x < rear_dist.z){\n        rear_hit = rear_dist.x;\n        rear_dir = 1.0 * sign(rd.x);\n    }\n    else if (rear_dist.y < rear_dist.x && rear_dist.y < rear_dist.z) {\n        rear_hit = rear_dist.y;\n        rear_dir = 2.0 * sign(rd.y);\n    }\n    else {\n        rear_hit = rear_dist.z;\n        rear_dir = 3.0 * sign(rd.z);\n    }\n    \n    vec4 res = vec4(front_hit, rear_hit, front_dir, rear_dir);    \n    return res;\n}\n\nvec4 pillar_hits(ivec2 cell, float height, vec3 ro, vec3 rd){    \n    // let's move the pillar into world space by having it's center + extends    \n    vec3 extend = vec3(1.0/vec2(CELLS), height*0.5);\n    vec3 p = vec3(cell.xy, height*0.5);    \n    p.xy *= extend.xy; \n    p.xy *= 2.0;\n    p.xy -= 1.0 - extend.xy; // not quite the offset?\n    //extend.z = extend.y; // make them cubes?\n    // TODO: redo this math when less asleep...\n    vec4 res = AABB(p, extend, ro, rd);\n    return res;\n}\n\n\nvec4 sampleHeight(ivec2 cell){\n    // to allow for more complex math to determine height\n    // .rgb should just return the texture color or some modification of it\n    //cell.x = (cell.x + iFrame) % int(iChannelResolution[0].x); // fun texture scroll\n    vec4 tex = texelFetch(iChannel0, cell, 0);\n    vec4 res;\n    res.a = (tex.r + tex.g + tex.b)/3.0;\n    res.rgb = tex.rgb; // * res.a; // to make it more of a \"height\" map?\n    //res.rgb = vec3(0.5);\n    //res.a = tex.a; // use existing height data?\n    res.a *= HEIGHT_SCALE;    \n    return res;\n}\n\nvec4 raycast(vec3 ro, vec3 rd){\n    // cast the ray untill there is a hit or we exit the box\n    // \"any hit\" shader?\n    // returns tex + dist, negative dist means a \"miss\"\n    vec4 box_hit = AABB(vec3(0.0, 0.0, HEIGHT_SCALE*0.5), vec3(1.0, 1.0, HEIGHT_SCALE*0.5), ro, rd);\n    \n    // miss or \"inside\" -.- TODO: got to figure out a better  check with normals maybe!\n    vec3 entry_norm = vec3(0.0);\n    entry_norm[abs(int(box_hit.z))-1] = sign(box_hit.z);\n    if ((box_hit.x > box_hit.y)){// && dot(rd, entry_norm) >= 0.0){\n        // if we \"MISS\" the whole box (not inside).\n        //return vec4(entry_norm+vec3(0.5)*1.1, -1.0);\n        return vec4(vec3(0.2), -abs(box_hit.y));\n    }\n    else if (box_hit.x < 0.0){\n        ro += rd* 0.0002; // so we avoid being \"inside\" a pillar early?\n        // we are inside because the entry is behind the ro!\n        //return vec4(vec3(rd), -1.0);\n        //return vec4(vec3(ro), -1.0);\n        //return vec4(entry_norm+vec3(0.5), 1.0);\n        //return vec4(vec3(0.2, 0.0, 0.8), -abs(box_hit.y));\n    }\n    \n    //return vec4(vec3(0.6), 1.0);\n    \n    vec3 entry;\n    entry = ro + rd*(box_hit.x); // should be start \"inside\" the box\n    ivec2 current_cell = worldToCell(entry); // TODO: this one is problematic!\n    int i;\n    int max_depth = (CELLS.x + CELLS.y)+2; // could also be min!\n    for (i = 0; i < max_depth; i++){        \n        if (current_cell.x < 0 || current_cell.x >= CELLS.x ||\n            current_cell.y < 0 || current_cell.y >= CELLS.y) {\n            // we marched far enough are are \"outside the box\" now!\n            return vec4(vec3(0.4), -abs(box_hit.y));\n        }        \n        vec4 tex = sampleHeight(current_cell);\n        vec4 hit = pillar_hits(current_cell, tex.a, ro, rd);\n        \n        vec3 entry_norm = vec3(0.0);\n        entry_norm[abs(int(hit.z))-1] = sign(hit.z);\n        \n        \n        vec3 exit = ro + (rd * hit.y);\n        vec3 exit_norm = vec3(0.0);\n        exit_norm[abs(int(hit.w))-1] = sign(hit.w);                \n        \n        if (hit.x < 0.0 && hit.y < 0.0) {\n            // the current cell is \"behind\" us, we basically miss\n            \n            //return vec4(vec2(current_cell).xyx/10.0, -abs(hit.x));\n            //return vec4(vec3(hit.y)+0.5, -1.0);\n            //return vec4(exit, -1.0);\n            //return vec4(entry, -1.0);\n            //return vec4(vec3(0.6), -1.0);\n            //return vec4(hit);\n            //return vec4(exit_norm+vec3(0.5), 1.0);            \n            //continue; // jumps ahead in the loop!\n        }\n        else if ((hit.x <= hit.y) && (dot(rd, entry_norm) >= 0.0)){\n            // \"any hit\" (side/top)\n            //return vec4(vec2(current_cell).xyx/10.0, abs(hit.x));\n            //return vec4(vec3(hit.x), abs(hit.x));\n            \n            // do a little bit of light sim by doing diffuse \"block of chalk\"\n            vec3 col = tex.rgb;\n            \n            // half the phong diffuse\n            // TODO: assume some base \"emissive\" quality to all pillars (or scaled with some value?)\n            // needs better hit model and shader to accumulate over a few traces.\n            col *= (2.0*dot(entry_norm, -SUN)) + 0.2; // \"ambient\"/emission term\n            \n            return vec4(col, abs(hit.x));\n        }        \n        \n        if (abs(exit_norm.z) > 0.0){\n            //basically this is a \"top\" exit, we aren't stepping further anymore. (on the shadow dir)\n            // TODO: think about what this means!\n            //return vec4(0.98, 0.821, 0.75, -abs(box_hit.y));\n        }\n        \n        // the step\n        ivec2 next_cell = current_cell + ivec2(exit_norm.xy);\n        if (next_cell == current_cell){\n            // in this case we do another raycast - but without any Z component\n            // so the vector is sideways and points to a new cell!\n            hit = pillar_hits(current_cell, 1.0, ro, normalize(vec3(rd.xy, 0.0)));\n            exit_norm = vec3(0.0); // has to be reset\n            exit_norm[abs(int(hit.w))-1] = sign(hit.w);\n            \n            next_cell += ivec2(exit_norm.xy);\n        }\n        // for next iteration\n        current_cell = next_cell;\n    }\n    //return vec4(vec2(current_cell)/vec2(CELLS), 0.0, 0.0);\n    // defualt \"miss\"? -> like we exit the box?\n    return vec4(vec3(1.0), -abs(box_hit.y));\n\n}\n\nfloat shadow(vec3 ro, vec3 rd){\n    // return the amount of shadowed?\n    // we are now marching upwards from some hit\n    // ro is essentially the point we started from\n    // rd is the sun angle\n    vec4 res = raycast(ro, normalize(rd));\n    //return res.a;\n    if (res.a < 0.0){// || (ro + rd*res.a).z >= HEIGHT_SCALE){\n        // likely means outside the box/ground!\n        return 1.0;\n    }    \n    else {\n        return 0.5;\n    }\n}\n\nfloat checkerboard(vec2 check_uv, float cells){\n    check_uv *= cells/2.0;\n    float rows = float(mod(check_uv.y, 1.0) <= 0.5);\n    float cols = float(mod(check_uv.x, 1.0) <= 0.5);\n    return float(rows == cols);\n}\n\n\nvec4 sampleGround(vec3 ro, vec3 rd){\n    // for any ray that misses the heightmap\n    float ground_height = 0.0;\n    float ground_dist = (ground_height-ro.z)/rd.z;\n    if (ground_dist < 0.0) {\n        // essentially sky hit instead?\n        // just some random skybox right now... could be improved of course!\n        return vec4(0.98, 0.79, 0.12, ground_dist)*exp(dot(SUN, rd));\n    }\n    \n    vec3 ground_hit = ro + (rd * ground_dist);\n        \n    float val = checkerboard(ground_hit.xy, 8.0)* 0.1;\n    val += 0.45;\n    //val *= 2.0 - length(abs(ground_hit));\n    \n    // fake sun angle spotlight... TODO actual angle and normal calculation!\n    val *= 2.5 - min(2.3, length((-SUN-ground_hit)));//,vec3(0.0,0.0,1.0));\n    \n    vec3 col = vec3(val);\n    return vec4(col, ground_dist);\n}\n\n\nfloat dda(vec3 rd, vec3 p){\n    // goal here is to return the distance to the next grid wall..\n    // we just do this in 2d and ignore the 3rd dimension\n    // depends on the CELLS gloabl/macro\n    float t;\n    \n    ivec2 cell = worldToCell(p);\n    \n    vec2 grid_uv = p.xy;\n    grid_uv += 1.0;\n    grid_uv *= 0.5;\n    grid_uv *= vec2(CELLS);\n    grid_uv = fract(grid_uv);\n    \n    vec2 wall_dist_deltas = abs(1./rd.yx); // because rd is normalized\n    \n    // which is closer?\n    \n    \n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv normalized to [-1..1] for height with more width\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 mo = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    \n    //fragColor = texture(iChannel0, uv);\n    //return;\n    \n    // for when it's just idling...   \n    float azimuth = iTime*0.15 + mo.x; // keeps a bit of residue of the mouse!\n    float altitude = 0.7+cos(iTime*0.4)*0.15;      \n    if (sign(iMouse.z) > 0.0){\n        // orbiting camera setup\n        azimuth = PI*mo.x;\n        altitude = 0.5*PI*clamp(mo.y+1.0, -0.01, 0.99); // maybe just positive?\n    }\n    \n    // make sure you don't look \"below\"\n    altitude = clamp(altitude, HEIGHT_SCALE*0.5, PI);\n    \n    // a unit length orbit!\n    vec3 camera_pos = vec3(\n        cos(azimuth)*cos(altitude),\n        sin(azimuth)*cos(altitude),\n        sin(altitude));    \n    // the camera is always looking \"at\" the origin or half way above it\n    vec3 look_dir = normalize(vec3(0.0, 0.0, HEIGHT_SCALE*0.5) - camera_pos);\n    \n    \n    // TODO moving the camera in and out over time??\n    camera_pos += look_dir * -1.0; // moving the camera \"back\" to avoid occlusions?\n    // two vectors orthogonal to this camera direction (tagents?)    \n    //vec3 look_u = camera_pos + vec3(-sin(azimuth), cos(azimuth), 0.0);\n    //vec3 look_v = camera_pos + vec3(sin(altitude)*-cos(azimuth), sin(altitude)*-sin(azimuth), cos(altitude));    \n    \n    // turns out analytically these aren't correct. so using cross instead -.-\n    vec3 look_u = normalize(cross(vec3(0.0, 0.0, -1.0), look_dir));\n    vec3 look_v = normalize(cross(camera_pos, look_u)); // is this faster?\n    // camera plane(origin of each pixel) -> barycentric?\n    \n    vec3 camera_plane;\n    vec3 ray_dir;\n    vec3 ray_origin;\n                        \n    if (FOV > 0.0){\n        // assume a pinhole camera.\n        // FOV is the horizontal fov, the given focal length becomes:\n        // the 1.0 is the sensor height.\n        float focal_length = 1.0/tan(radians(FOV*0.5));\n        \n        // the ro\n        camera_plane = camera_pos - (look_dir*focal_length) + ((look_u*uv.x) + (look_v*uv.y))*-1.0; // inverted here to see upright\n        ray_origin = camera_pos;\n        \n        // the rd\n        ray_dir = camera_pos-camera_plane;\n        ray_dir = normalize(ray_dir);        \n    }\n    \n    else {\n        // negative FOV values are interpreted as a sensor size for a orthographic camera!\n        // horizontal sensor size, -1 would be something sensible... everything else is far away\n        float sensor_size = FOV*0.5*-1.0;\n        camera_plane = camera_pos + ((look_u*uv.x)+(look_v*uv.y))*sensor_size; // wider fov = larger \"sensor\"\n        ray_dir = look_dir;\n        ray_origin = camera_plane;\n    }\n    \n    // actual stuff happening:\n    vec4 res = raycast(ray_origin, ray_dir);\n    if (res.a < 0.0) {\n        res = sampleGround(ray_origin, ray_dir);\n    }\n    vec3 hit = ray_origin + (ray_dir*res.a);\n    vec4 ref = raycast(hit, SUN).rgba; //reflection (the full shadow)    \n    ref.rgb *= 1.0 - step(0.0, ref.a); // this makes misses black?\n    \n    float shadow_amt = shadow(hit, SUN);\n    \n    vec3 col = res.rgb * shadow_amt;\n    \n    // TODO: better \"shadow\" value via actually colored shadow??\n    // vec3 col2 = res.rgb + ref.rgb*0.3;    \n    // col = vec3(uv.x > 0.0 ? col.rgb : col2.rgb);\n    \n    fragColor = vec4(vec3(col),1.0);\n}",
      "name": "Image",
      "description": "",
      "type": "image"
    }
  ]
}