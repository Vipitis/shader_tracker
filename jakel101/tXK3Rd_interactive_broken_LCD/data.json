{
  "ver": "0.1",
  "info": {
    "id": "tXK3Rd",
    "date": "1752868197",
    "viewed": 107,
    "name": "interactive broken LCD",
    "username": "jakel101",
    "description": "the lowest effort idea on my massive list of shader ideas. Use the mouse start and end positions to break it in another way.\nYou can also put this in the image pass for other existing shaders!",
    "likes": 9,
    "published": 3,
    "flags": 32,
    "usePreview": 0,
    "tags": [
      "postfx",
      "broken",
      "lcd",
      "discord"
    ],
    "hasliked": 0,
    "retrieved": "2025-07-26T00:37:54.191504+00:00"
  },
  "renderpass": [
    {
      "inputs": [
        {
          "id": 257,
          "src": "/media/previz/buffer00.png",
          "ctype": "buffer",
          "channel": 0,
          "sampler": {
            "filter": "linear",
            "wrap": "clamp",
            "vflip": "true",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        }
      ],
      "outputs": [
        {
          "id": 37,
          "channel": 0
        }
      ],
      "code": "// Apache 2.0 no patents [!__!] \n// this is meant as a effects pass (image pass)\n// where it reads some background and make it look sorta broken\n// improvements and remixes welcome!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse_start = abs(iMouse.zw)/iResolution.xy;\n    vec2 mouse_end = iMouse.xy/iResolution.xy;\n    \n    // default values for before you touch mouse first time!\n    if (iMouse.x == 0.0 && iMouse.z == 0.0){\n        mouse_start = vec2(0.2);\n        mouse_end = vec2(0.2);\n    }\n    \n    // to capture the background, we distor the uv a bit for extra fun\n    // disorted uv along the vertical axis\n    vec2 distoriton = uv;\n    \n    // this one moves but has glitchy edges\n    float fuzzy = clamp(tan(iTime*iDate.w),-0.3, 0.1);\n    float strength_mask = 1.0 -clamp(abs(uv.y*2.0 - mouse_end.y-0.3)*(fuzzy+3.0), 0.0, 1.0);\n    float offset = exp(sin(distoriton.y*30000.0*iTime))*max(-0.3, cos(iTime*0.33)*4.0);\n    distoriton.y += offset*strength_mask;\n    \n    // this goes negative or positive a few times but stays at 0 most of the time...\n    float sporadic = min(sin(mod(iTime, 3.4)), 0.0) - min(cos(mod(iTime*.3, 1.6)), 0.0)*sign(cos(iTime*3.0));\n    \n    distoriton.x += (0.5-uv.y)*sign(sporadic)*0.1;\n    vec3 good = texture(iChannel0, distoriton).rgb; // TODO: different name\n\n\n    // broken area\n    vec3 bad = vec3(1.0) - good;\n    bad = normalize(bad);\n    bad -= fract(uv.x * 73.8 + sin(iTime*0.04-uv.x*914.0035))* 10.0; // pseudo hash that looks good enough right now\n    //bad = max(vec3(0.0), bad);\n    bad.b *= 64.0;\n    bad.g *= uv.x*mouse_end.x;\n    bad.b += (tan((mouse_start.y - uv.y)*1.0));\n    \n    bad = clamp(bad, vec3(0.0), vec3(1.0));\n\n    \n    //bad = normalize(bad);\n    // todo additional distortions, streaks etc    \n    vec3 bad2 = vec3(1.0 - bad);\n    bad2 = pow(bad2, good*0.2);    \n    bad2 -= fract(uv.y * 73.8 + sin(iTime*0.04-uv.y*914.0035))* 10.0;\n    bad2 *= cross(vec3(mouse_start.xy, sign(cos(iTime*0.8))), normalize(vec3(sin(iTime*0.3),uv.yx)));\n    \n    bad2 = clamp(bad2, vec3(0.0), vec3(1.0));    \n\n\n    // simple polynomals, offset by the mouse positions. Have a root in 0.0... could be more dynamic\n    // TODO: more dynamic?\n    \n    //abs(x)*(x*0.1 -1)*0.2\n    float f1 = abs((uv.x-mouse_start.x))*((uv.x-mouse_start.x)*1.5 -1.0)*0.2+mouse_start.y;\n    f1 += fuzzy*0.03*abs(mouse_end.x);\n    //float f1 = 0.12*((uv.x-mouse_start.x)-2.0)*-(pow(((uv.x-mouse_start.x)-2.0),3.0)+9.0)-0.24+mouse_start.y;\n    float f2 = abs((uv.y-mouse_end.y))*((uv.y-mouse_end.y)*1.2 -1.0)*0.2+mouse_end.x;\n    f2 += fract(sin(40.0 +uv.y*mouse_start.y*523.3))*0.002; // cheap \"cracked edge\"\n    //float f2 = 3.0*((uv.y-mouse_end.y) * -(uv.y-mouse_end.y)) *(0.84*uv.y-mouse_end.y) + mouse_end.x;    \n    \n    float mask1 = float((f1 > uv.y));\n    float mask2 = float((f2 > uv.x));       \n    \n    vec3 col = good;\n    col = mix(col, bad, mask1);\n    col = mix(col, bad2, mask2);\n    col = mix(col, bad+bad2, mask1*mask2); // awful overlap?\n    // Output to screen\n    fragColor = vec4(vec3((col)),1.0);\n}",
      "name": "Image",
      "description": "",
      "type": "image"
    },
    {
      "inputs": [],
      "outputs": [
        {
          "id": 257,
          "channel": 0
        }
      ],
      "code": "// forked from https://www.shadertoy.com/view/tXV3Rw\n// changes:\n// parameterized colors\n// expanded style to fit mine...\n// made smaller, changed colors,\n// added little glow animation\n\n// yes, join the Discord!! https://discord.gg/XtmMN6E\n// it's official, see the bottom left corner\n\n\n// goal is to get the apple logo kinda look, ref by \n// https://discord.com/channels/578696555612209173/579528698164805634/1395607001274515508\n\nfloat sdEllipse(vec2 p, vec2 r)\n{\n    float f = length(p / r),\n          g = length(p / r / r);\n    \n    return f * (f - 1.) / g;\n}\n\nfloat sdDiscord(vec2 p)\n{\n    p.x = abs(p.x);\n    \n    float d = length(p + vec2(0, .52)) - .91;\n          d = max(d, length(p - vec2(0, .41)) - .83);\n          d = max(d, length(p - vec2(.82, .09)) - .74);\n          d = max(d, min(.54 - length(p - vec2(0, .21)), \n                         -(.81 * p.x + p.y + .03) / length(vec2(.81, 1))));\n          d = min(d, max(length(p - vec2(0, .3)) - .59,\n                         length(p + vec2(0, .36)) - .7));\n          d = max(d, length(p + vec2(.34, .16)) - .84);\n          d = max(d, -sdEllipse(p - vec2(.165, -.038), vec2(.09, .1)));\n    \n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    float d = sdDiscord(uv*2.0);\n    \n    vec3 logo_col = vec3(0.878, 0.89, 1.0);\n    vec3 back_col = vec3(0.345, 0.396, 0.949);\n    vec3 dark_col = vec3(0.07, 0.07, 0.08); //~#121214\n\n    // cheap glow\n    float glow = exp(-d*50.0);\n        \n    vec3 col = mix(logo_col, dark_col, smoothstep(-1., 1., d * iResolution.y));\n    col += glow*((sin(iTime)*0.4)+0.5);\n    \n    fragColor = vec4(col, 1.0);\n}",
      "name": "Buffer A",
      "description": "",
      "type": "buffer"
    }
  ]
}