{
  "ver": "0.1",
  "info": {
    "id": "t3tXz8",
    "date": "1753142287",
    "viewed": 110,
    "name": "Dirt Terrain of Pillars",
    "username": "jakel101",
    "description": "this is meant to be a submission for https://itch.io/jam/acerola-dirt-jam",
    "likes": 13,
    "published": 3,
    "flags": 48,
    "usePreview": 0,
    "tags": [
      "terrain",
      "pathtracing",
      "dirtjam"
    ],
    "hasliked": 0,
    "retrieved": "2025-07-26T00:37:54.191504+00:00"
  },
  "renderpass": [
    {
      "inputs": [
        {
          "id": 257,
          "src": "/media/previz/buffer00.png",
          "ctype": "buffer",
          "channel": 0,
          "sampler": {
            "filter": "linear",
            "wrap": "clamp",
            "vflip": "true",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        }
      ],
      "outputs": [
        {
          "id": 37,
          "channel": 0
        }
      ],
      "code": "// Apache 2.0 no patents /^\u00a7^\\\n\n// Image pass implemented as my heightmap pathtracing project: https://www.shadertoy.com/view/M3VBWt\n// with a couple tweaks to make it work for this example :)\n\n// SOME BUGS: (or todos)\n// the raycast doesn't work \"upwards\" as expected. so camera stays outside and orbiting\n// clouds are composited ontop and don't care for order or distance (so they \n// clouds have a strong moire pattern because traversal abbrpuptly begins at the top plane\n\n# define PI 3.141592653\n// tweaked with 0.4 in mind others could look wonky...\n# define HEIGHT_SCALE 0.5\n\n// this is square but still depends on the canvas resolution!\n# define CELLS ivec2(min(iChannelResolution[0].x, iChannelResolution[0].y))\n\n// unsure yet where to bring this!\n# define SUN normalize(vec3(sin(iDate.w*0.05), cos(iTime*0.2), HEIGHT_SCALE*1.5))\n// normalize(vec3(3.0, -5.0, 2.0))\n\n// horizontal FOV, if you use negative values the camera will be orthographic!\n// examples:\n// FOV -1.0 for orthographic (sensor size)\n// FOV 90.0 for perspective wide\n// FOV 45.0 for perspective narower\n# define FOV 65.0\n\nivec2 worldToCell(vec3 p) {\n    \n    // move world space again\n    p += 1.0;\n    p *= 0.5;\n    ivec2 st = ivec2((p.xy*vec2(CELLS.xy)));\n    // TODO: find an actual solution to the edge cases!\n    st = min(st, CELLS -1);\n    return st;\n}\n\nvec4 AABB(vec3 center, vec3 extend, vec3 ro, vec3 rd){        \n    // miss is found by checking rear_hit > front_hit\n    // .zw contains information about the entry/exit 1: +x, -1: -x, 2: +y, -2: -y, 3: +z, -3: -z??\n    // you can do norm[abs(int(box_hit.z))-1] = sign(box_hit.z);\n    \n    // extend goes both ways! (size)\n    vec3 front = center + sign(-rd)*extend; \n    vec3 rear = center + sign(rd)*extend; \n    \n    //now distance those 6 planes:\n    vec3 front_dist = (front-ro)/rd;\n    vec3 rear_dist = (rear-ro)/rd;\n    \n    // TODO: turn into massive if/else if/else blocks for the direction info? (is there argmax?)\n    float front_hit;//= max(max(front_dist.x, front_dist.y), front_dist.z); // front\n    float front_dir;\n    if (front_dist.x > front_dist.y && front_dist.x > front_dist.z){\n        front_hit = front_dist.x;\n        front_dir = 1.0 * sign(rd.x);\n    }\n    else if (front_dist.y > front_dist.x && front_dist.y > front_dist.z) {\n        front_hit = front_dist.y;\n        front_dir = 2.0 * sign(rd.y);\n    }\n    else {\n        front_hit = front_dist.z;\n        front_dir = 3.0 * sign(rd.z);\n    }\n    // in case of ro being inside the box, the front_dir normal still needs to point away from center.\n    front_dir *= sign(front_hit); \n    \n    float rear_hit;// = min(min(rear_dist.x, rear_dist.y), rear_dist.z);\n    float rear_dir;\n    if (rear_dist.x < rear_dist.y && rear_dist.x < rear_dist.z){\n        rear_hit = rear_dist.x;\n        rear_dir = 1.0 * sign(rd.x);\n    }\n    else if (rear_dist.y < rear_dist.x && rear_dist.y < rear_dist.z) {\n        rear_hit = rear_dist.y;\n        rear_dir = 2.0 * sign(rd.y);\n    }\n    else {\n        rear_hit = rear_dist.z;\n        rear_dir = 3.0 * sign(rd.z);\n    }\n    \n    vec4 res = vec4(front_hit, rear_hit, front_dir, rear_dir);    \n    return res;\n}\n\n\nvec4 pillar_hits(ivec2 cell, float height, vec3 ro, vec3 rd){    \n    // let's move the pillar into world space by having it's center + extends\n    \n    vec3 extend = vec3(1.0/vec2(CELLS), abs(height)*0.5);\n    vec3 p = vec3(cell.xy, abs(height)*0.5);    \n    p.xy *= extend.xy; \n    p.xy *= 2.0;\n    p.xy -= 1.0 - extend.xy; // not quite the offset?\n    //extend.z = extend.y; // make them cubes?\n    \n    // for the case of clouds the box is at the top?\n    if (height < 0.0){\n        p.z = HEIGHT_SCALE*(1.0-abs(height*0.5));\n    }    \n    \n    // TODO: redo this math when less asleep...\n    vec4 res = AABB(p, extend, ro, rd);\n    return res;\n}\n\n\nvec3 terrain_palette(float h){\n    // return a specific color based on height. \n    // I manaually draw the RGB curves in a curve editor tool I have for thermal imaging\n    // then crafted functions in graphtoy to minic their paths and put it here\n    \n    // offsets\n    float h_r = h - 0.52;\n    float h_g = h - 0.4;\n    float h_b = h - 0.15;\n    // cubic polynomials\n    float r = (6.0*pow(h_r,3.0) + 0.1*pow(h_r,2.0) + 0.0*h_r +0.3);\n    float g = (6.0*pow(h_g,3.0) + 0.1*pow(h_g,2.0) + -1.0*h_g +0.3);\n    float b = (4.0*pow(h_b,3.0) + 0.1*pow(h_b,2.0) + -2.0*h_b +0.3);\n    \n    //vec3(0.267, 0.133, 0.001); // ~#442200\n    vec3 col = vec3(r,g,b);\n    return col;\n}\n\nvec4 sampleHeight(ivec2 cell){\n    // to allow for more complex math to determine height\n    // .rgb should just return the texture color or some modification of it\n    //cell.x = (cell.x + iFrame) % int(iChannelResolution[0].x); // fun texture scroll\n    vec4 tex = texelFetch(iChannel0, cell, 0);\n    vec4 res;\n    res.a = tex.r; // our height data is in this channel\n    res.rgb = terrain_palette(res.a*1.5-0.2); // move it a round a bit so the pallete looks okay...\n    \n    // could also just be a constant here!\n    if (tex.b > 0.0){\n        // cheap solid water in amount of water per pillar...\n        // TODO semi transparen/reflective water?\n        // the simulation is in the Buffer pass, we just reconstruct the height for rendering here\n        res.a += tex.b;\n        res.rgb = mix(vec3(0.2, 0.5, 0.8), vec3(0.1, 0.1, 0.9), tex.b*20.0); // little color for water \"depth\"\n    }\n    res.a *= HEIGHT_SCALE;\n    return res;\n}\n// this could be joined into the function above.\nfloat sampleClouds(ivec2 cell){\n    // idea is to read the texture data in a specific channel for cloud height/density?\n    // this needs to be implemented in my function down below as an alternative hit.\n    vec4 tex = texelFetch(iChannel0, cell, 0);        \n    float res = tex.g; // this channel has \"cloud\" terrain\n    // maybe we clamp it or something to have no clouds?\n    res -= 0.55; // negative values become clouds that show up.\n    return res;    \n}\n\nvec4 raycast(vec3 ro, vec3 rd, inout float cloud_acc){\n    // cast the ray untill there is a hit or we exit the box\n    // \"any hit\" shader?\n    // returns tex + dist, negative dist means a \"miss\"\n    // the inout for clouds sums up it's distance and depth of clouds.\n    vec4 box_hit = AABB(vec3(0.0, 0.0, HEIGHT_SCALE*0.5), vec3(1.0, 1.0, HEIGHT_SCALE*0.5), ro, rd);\n    cloud_acc = 0.0;\n    \n    // miss or \"inside\" -.- TODO: got to figure out a better  check with normals maybe!\n    vec3 entry_norm = vec3(0.0);\n    entry_norm[abs(int(box_hit.z))-1] = sign(box_hit.z);\n    if ((box_hit.x > box_hit.y)){// && dot(rd, entry_norm) >= 0.0){\n        // if we \"MISS\" the whole box (not inside).\n        //return vec4(entry_norm+vec3(0.5)*1.1, -1.0);\n        return vec4(vec3(0.2), -abs(box_hit.y));\n    }\n    else if (box_hit.x < 0.0){\n        ro += rd* 0.0002; // so we avoid being \"inside\" a pillar early?\n        // we are inside because the entry is behind the ro!\n        //return vec4(vec3(rd), -1.0);\n        //return vec4(vec3(ro), -1.0);\n        //return vec4(entry_norm+vec3(0.5), 1.0);\n        //return vec4(vec3(0.2, 0.0, 0.8), -abs(box_hit.y));\n    }\n    \n    //return vec4(vec3(0.6), 1.0);\n    \n    vec3 entry;\n    entry = ro + rd*(box_hit.x); // should be start \"inside\" the box\n    ivec2 current_cell = worldToCell(entry); // TODO: this one is problematic!\n    int i;\n    int max_depth = (CELLS.x + CELLS.y)+2; // could also be min!\n    for (i = 0; i < max_depth; i++){        \n        if (current_cell.x < 0 || current_cell.x >= CELLS.x ||\n            current_cell.y < 0 || current_cell.y >= CELLS.y) {\n            // we marched far enough are are \"outside the box\" now!\n            return vec4(vec3(0.4), -abs(box_hit.y));\n        }        \n        // so let's look for clouds first!\n        float cloud_depth = sampleClouds(current_cell);        \n        if (cloud_depth < 0.){ // cand adjust how \"many\" clouds here!\n            // only if there is a cloud we even consider this\n            vec4 cloud_hit = pillar_hits(current_cell, (cloud_depth*0.2), ro, rd);\n            if ((cloud_hit.x <= cloud_hit.y)){\n                \n                // we scale the cloud by how much of it we traversed plus the inverse dpeth (~= color)?\n                cloud_acc += (1.0 - cloud_depth)*(cloud_hit.y - cloud_hit.x);\n                \n                //return vec4(vec3((1.0 - cloud_depth)), 0.0*abs(cloud_hit.x));\n            }\n        }\n        \n        vec4 tex = sampleHeight(current_cell);\n        vec4 hit = pillar_hits(current_cell, tex.a, ro, rd);\n        \n        \n        \n        vec3 entry_norm = vec3(0.0);\n        entry_norm[abs(int(hit.z))-1] = sign(hit.z);\n        \n        \n        vec3 exit = ro + (rd * hit.y);\n        vec3 exit_norm = vec3(0.0);\n        exit_norm[abs(int(hit.w))-1] = sign(hit.w);                \n        \n        if (hit.x < 0.0 && hit.y < 0.0) {\n            // the current cell is \"behind\" us, we basically miss\n            \n            //return vec4(vec2(current_cell).xyx/10.0, -abs(hit.x));\n            //return vec4(vec3(hit.y)+0.5, -1.0);\n            //return vec4(exit, -1.0);\n            //return vec4(entry, -1.0);\n            //return vec4(vec3(0.6), -1.0);\n            //return vec4(hit);\n            //return vec4(exit_norm+vec3(0.5), 1.0);            \n            //continue; // jumps ahead in the loop!\n        }\n        else if ((hit.x <= hit.y) && (dot(rd, entry_norm) >= 0.0)){\n            // \"any hit\" (side/top)\n            //return vec4(vec2(current_cell).xyx/10.0, abs(hit.x));\n            //return vec4(vec3(hit.x), abs(hit.x));\n            \n            // do a little bit of light sim by doing diffuse \"block of chalk\"\n            vec3 col = tex.rgb;\n            // half the phong diffuse\n            // TODO: assume some base \"emissive\" quality to all pillars (or scaled with some value?)\n            // needs better hit model and shader to accumulate over a few traces.\n            col *= (2.0*dot(entry_norm, -SUN)) + 0.2; // \"ambient\"/emission term\n            \n            return vec4(col, abs(hit.x));\n        }        \n        \n        if (abs(exit_norm.z) > 0.0){\n            //basically this is a \"top\" exit, we aren't stepping further anymore. (on the shadow dir)\n            // TODO: think about what this means!\n            //return vec4(0.98, 0.821, 0.75, -abs(box_hit.y));\n        }\n        \n        // the step\n        ivec2 next_cell = current_cell + ivec2(exit_norm.xy);\n        if (next_cell == current_cell){\n            // in this case we do another raycast - but without any Z component\n            // so the vector is sideways and points to a new cell!\n            hit = pillar_hits(current_cell, 1.0, ro, normalize(vec3(rd.xy, 0.0)));\n            exit_norm = vec3(0.0); // has to be reset\n            exit_norm[abs(int(hit.w))-1] = sign(hit.w);\n            \n            next_cell += ivec2(exit_norm.xy);\n        }\n        // for next iteration\n        current_cell = next_cell;\n    }\n    //return vec4(vec2(current_cell)/vec2(CELLS), 0.0, 0.0);\n    // defualt \"miss\"? -> like we exit the box?\n    return vec4(vec3(1.0), -abs(box_hit.y));\n\n}\n\n// more like a bad shadowmap\nfloat shadow(vec3 ro, vec3 rd){\n    // return the amount of shadowed?\n    // we are now marching upwards from some hit\n    // ro is essentially the point we started from\n    // rd is the sun angle\n    float cloud_term;\n    vec4 res = raycast(ro, normalize(rd), cloud_term);\n    //return res.a;\n    if (res.a < 0.0){// || (ro + rd*res.a).z >= HEIGHT_SCALE){\n        // likely means outside the box/ground!\n        // so think like \"skylight\"        \n        cloud_term = clamp(1.0-exp(-cloud_term*15.0), 0.0, 1.0);\n        // full sunlight        \n        return 1.0 -cloud_term;\n    }    \n    else {\n        return 0.0;\n    }\n}\n\nfloat checkerboard(vec2 check_uv, float cells){\n    check_uv *= cells/2.0;\n    float rows = float(mod(check_uv.y, 1.0) <= 0.5);\n    float cols = float(mod(check_uv.x, 1.0) <= 0.5);\n    return float(rows == cols);\n}\n\n\nvec4 sampleGround(vec3 ro, vec3 rd){\n    // for any ray that misses the heightmap\n    // TODO: rename to sample skybox maybe? as the ground is sorta part of that...\n    float ground_height = 0.0;\n    float ground_dist = (ground_height-ro.z)/rd.z;\n    if (ground_dist < 0.0) {\n        // essentially sky hit instead?\n        // just some random skybox right now... could be improved of course!\n        return vec4(0.98, 0.79, 0.12, ground_dist)*exp(dot(SUN, rd));\n    }\n    \n    vec3 ground_hit = ro + (rd * ground_dist);\n        \n    float val = checkerboard(ground_hit.xy, 8.0)* 0.1;\n    val += 0.45;\n    //val *= 2.0 - length(abs(ground_hit));\n    \n    // fake sun angle spotlight... TODO actual angle and normal calculation!\n    val *= 2.5 - min(2.3, length((-SUN-ground_hit)));//,vec3(0.0,0.0,1.0));\n    \n    vec3 col = vec3(val);\n    return vec4(col, ground_dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv normalized to [-1..1] for height with more width\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 mo = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    \n    //fragColor = texture(iChannel0, uv);\n    //return;\n    \n    // for when it's just idling...   \n    float azimuth = iTime*0.15 + mo.x; // keeps a bit of residue of the mouse!\n    float altitude = 0.7+cos(iTime*0.4)*0.15;      \n    if (sign(iMouse.z) > 0.0){\n        // orbiting camera setup\n        azimuth = PI*mo.x;\n        altitude = 0.5*PI*clamp(mo.y+1.0, -0.01, 0.99); // maybe just positive?\n    }\n    \n    // make sure you don't look \"below\"\n    altitude = clamp(altitude, HEIGHT_SCALE*0.5, PI);\n    \n    // a unit length orbit!\n    vec3 camera_pos = vec3(\n        cos(azimuth)*cos(altitude),\n        sin(azimuth)*cos(altitude),\n        sin(altitude));               \n    // the camera is always looking \"at\" the origin or half way above it\n    vec3 look_dir = normalize(vec3(0.0, 0.0, HEIGHT_SCALE*0.5) - camera_pos);\n    \n    \n    // TODO moving the camera in and out over time??\n    camera_pos += look_dir * -1.0; // moving the camera \"back\" to avoid occlusions?\n    // two vectors orthogonal to this camera direction (tagents?)    \n    //vec3 look_u = camera_pos + vec3(-sin(azimuth), cos(azimuth), 0.0);\n    //vec3 look_v = camera_pos + vec3(sin(altitude)*-cos(azimuth), sin(altitude)*-sin(azimuth), cos(altitude));    \n\n    \n    // turns out analytically these aren't correct. so using cross instead -.-\n    vec3 look_u = normalize(cross(vec3(0.0, 0.0, -1.0), look_dir));\n    vec3 look_v = normalize(cross(camera_pos, look_u)); // is this faster?\n    // camera plane(origin of each pixel) -> barycentric?\n    \n    vec3 camera_plane;\n    vec3 ray_dir;\n    vec3 ray_origin;\n                        \n    if (FOV > 0.0){\n        // assume a pinhole camera.\n        // FOV is the horizontal fov, the given focal length becomes:\n        // the 1.0 is the sensor height.\n        float focal_length = 1.0/tan(radians(FOV*0.5));\n        \n        // the ro\n        camera_plane = camera_pos - (look_dir*focal_length) + ((look_u*uv.x) + (look_v*uv.y))*-1.0; // inverted here to see upright\n        ray_origin = camera_pos;\n        \n        // the rd\n        ray_dir = camera_pos-camera_plane;\n        ray_dir = normalize(ray_dir);        \n    }\n    \n    else {\n        // negative FOV values are interpreted as a sensor size for a orthographic camera!\n        // horizontal sensor size, -1 would be something sensible... everything else is far away\n        float sensor_size = FOV*0.5*-1.0;\n        camera_plane = camera_pos + ((look_u*uv.x)+(look_v*uv.y))*sensor_size; // wider fov = larger \"sensor\"\n        ray_dir = look_dir;\n        ray_origin = camera_plane;\n    }\n    \n    // actual stuff happening:\n    float cloud_sum;\n    vec4 res = raycast(ray_origin, ray_dir, cloud_sum);\n    if (res.a < 0.0) {\n        // we missed the initial terrain\n        res = sampleGround(ray_origin, ray_dir);        \n    }\n    vec3 hit = ray_origin + (ray_dir*res.a);\n    \n    float shadow_cloud; // unused?\n    vec4 ref = raycast(hit, SUN, shadow_cloud).rgba; //reflection (the full shadow)    \n    ref.rgb *= 1.0 - step(0.0, ref.a); // this makes misses black?\n    \n    \n    float shadow_amt = shadow(hit, SUN);\n    // actually more light amount -.-\n    // so we add and \"ambient\" base like here\n    vec3 col = res.rgb * max(0.3, shadow_amt);\n    \n    // bad approximation of \"beers law\"?\n    float cloud_term = clamp(1.0-exp(-cloud_sum*15.0), 0.0, 1.0);\n    // additive/premultiplied merge here... could be wrong because not linear?\n    col = mix(col, vec3(cloud_term), cloud_term);\n    \n    // TODO: better \"shadow\" value via actually colored shadow??\n    // vec3 col2 = res.rgb + ref.rgb*0.3;    \n    // col = vec3(uv.x > 0.0 ? col.rgb : col2.rgb);\n    \n    fragColor = vec4(vec3(col),1.0);\n}",
      "name": "Image",
      "description": "",
      "type": "image"
    },
    {
      "inputs": [
        {
          "id": 33,
          "src": "/presets/tex00.jpg",
          "ctype": "keyboard",
          "channel": 1,
          "sampler": {
            "filter": "linear",
            "wrap": "clamp",
            "vflip": "true",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        },
        {
          "id": 257,
          "src": "/media/previz/buffer00.png",
          "ctype": "buffer",
          "channel": 0,
          "sampler": {
            "filter": "linear",
            "wrap": "clamp",
            "vflip": "true",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        }
      ],
      "outputs": [
        {
          "id": 257,
          "channel": 0
        }
      ],
      "code": "// for the terrain map I combined a bunch of existing and tutorial level snippets\n\n// water simulation controls:\n// SPACE - toggle all simulaion on/off :: default:on\n// E - Erosion simulation toggle on/off :: default:off\n// R - Rain for low clouds toggle on/off :: defualt:on\n\n\n// from https://www.shadertoy.com/view/XlGcRh\nuvec2 pcg2d(uvec2 v)\n{\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\n// wraps the bitconversion and just accessses half the values\nfloat hash21(in vec2 a){\n    uvec2 b = uvec2(floatBitsToUint(a.x), floatBitsToUint(a.y));\n    uvec2 c = pcg2d(b);\n    float r = float(c.x)/float(-1u); // seems to work I guess... but don't we lose a lot of data??\n    // fract(uintBitsToFloat(c.x)) // this one causes issues due to NaN or something, results in black spots in the noise\n    return r;\n}\n\n// TODO to make the clouds more accurate, this should actually be a slice of 3D noise we rotate through\nfloat noise(in vec2 a){\n   // perlin 2D noise\n   vec2 i = floor(a);\n   vec2 f = fract(a);\n   \n   // four corners\n   float bl = hash21(i + vec2(0.0, 0.0));\n   float br = hash21(i + vec2(1.0, 0.0));\n   float tl = hash21(i + vec2(0.0, 1.0));\n   float tr = hash21(i + vec2(1.0, 1.0));\n   \n   vec2 s = smoothstep(0.0, 1.0, f);\n   \n   \n   return mix( mix(bl, br, s.x),\n               mix(tl, tr, s.x), s.y);\n}\n\n// via https://thebookofshaders.com/13/\nfloat fbm(in vec2 p){\n    \n    // parameters\n    int octaves = 8;\n    float l = 2.0;\n    float g = 0.5;\n    \n    // initial values\n    float a = 0.5;\n    float f = 1.0;\n    float res = 0.0;\n    for(int i = 0; i < octaves; i++){\n        res += a * noise(p*f);\n        f *= l;\n        a *= g;\n        \n    }\n    return res;\n    \n}\n\nvec4 init_terrain(vec2 uv, float time_seed){\n    // initialize the terrain?\n\n    vec4 start;\n    // we don't do anything interesting here :(\n    float height = fbm(uv*3.0+vec2(time_seed*0.2));    \n    // let's have some fun!\n    float clouds = fbm(uv*4.0+vec2(-time_seed*0.1));\n    \n    // water as an amount, not a height.\n    float water = max(0.0, 0.3-height);\n\n    // alpha channel currently not used...\n    start = vec4(vec3(height, clouds, water),1.0);\n    return start;\n}\n\n// idea... look at the the neighbords and then check if water exists in the highest point.\n// step the water down (by full amount) or based on the gradient?\nvec2 simulate_water(ivec2 pos){\n    // do we get the clouds to know where it rains?\n    vec4 old = texelFetch(iChannel0, pos, 0); // these could be passed in?                \n    float old_water = old.z;  \n    float old_height = old.x;\n    \n    float evaporation = iTimeDelta*(max(0.0,((3.5*old_height)-0.3)));        \n    old_water *= (1.0-evaporation);\n    \n    \n    float water_level = old_height + old_water;\n    float water_change = 0.0; // the amount \"added\" or removed\n    float height_change = 0.0; \n    \n    // rain, toggle with R\n    float rain_toggle = 1.0 - texelFetch(iChannel1, ivec2(82, 2), 0).x;   \n    if (old.y < 0.2) {\n        // could be based on cloud thickness, maybe even drain the clouds?\n        water_change += iTimeDelta*0.1*rain_toggle;\n    }   \n    \n    // REDO with a loop\n    ivec2 neighbors[4] = ivec2[4] (ivec2(1,0), ivec2(-1,0), ivec2(0,1), ivec2(0,-1));\n    int i;\n    for (i=0; i<neighbors.length(); i++){        \n        vec4 n = texelFetch(iChannel0, pos+neighbors[i], 0);\n        float n_level = n.x + n.z;\n        float water_diff = n_level - water_level;        \n        water_change += clamp(water_diff, -old_water, n.z);\n    }\n    \n    water_change /= float(neighbors.length()); // does this need to be normalized?\n    \n    \n    // erosion demo: toggle with E\n    float erotion_toggle = texelFetch(iChannel1, ivec2(69, 2), 0).x;   \n    height_change = -water_change*0.2*erotion_toggle; // erosion like this?\n    \n    \n    return vec2(old_height + height_change, old_water + water_change);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    ivec2 st = ivec2(fragCoord);\n    \n    if (fragCoord.x > iResolution.y){\n        // will break on protrait aspect ratio -.-\n        discard; // throw away the threads that are outside the simulation area\n    }\n        \n    //TODO terrain can still move if we offset the sample coords!\n    vec4 prev = texelFetch(iChannel0, st, 0);\n    if (iFrame < 1 || prev.x <= 0.0){ // hack for resizing? -> still messes up uv scaling...\n        prev = init_terrain(uv, 0.0);\n    }\n    else {\n        // let's have some fun!\n        float clouds = fbm(uv*4.0+vec2(-iTime*0.3));\n\n        prev.y = clouds;\n        // press spacebar to toggle water sim (rain, gravity and evaporation) on/off... stars on on.\n        if (texelFetch(iChannel1, ivec2(32, 2), 0).x<0.5){\n            prev.xz = simulate_water(st);\n        }\n    }\n    \n    \n    \n    // clouds = uv.y; //ramp for testing\n    // the blue channel might be water... (and we could animate/simulate it here!)\n    //fragColor = vec4(vec3(height, clouds, water),1.0);\n    \n    fragColor = prev;\n}",
      "name": "Buffer A",
      "description": "",
      "type": "buffer"
    }
  ]
}